{"ast":null,"code":"var _jsxFileName = \"Z:\\\\ideapad s145\\\\Go Project\\\\taskmanager_frontend\\\\src\\\\components\\\\CreateTaskForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateTaskForm({\n  setTasks\n}) {\n  _s();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('http://localhost:8080/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        completed: false\n      })\n    });\n    if (response.ok) {\n      const newTask = await response.json();\n      setTasks(prevTasks => [...prevTasks, newTask]);\n      setTitle('');\n      setDescription('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Title\",\n      value: title,\n      onChange: e => setTitle(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Description\",\n      value: description,\n      onChange: e => setDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n_s(CreateTaskForm, \"1UKQWTfo2RWmkwPNsekAdQbvqFk=\");\n_c = CreateTaskForm;\nexport default CreateTaskForm;\nvar _c;\n$RefreshReg$(_c, \"CreateTaskForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CreateTaskForm","setTasks","_s","title","setTitle","description","setDescription","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","completed","ok","newTask","json","prevTasks","onSubmit","children","type","placeholder","value","onChange","target","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["Z:/ideapad s145/Go Project/taskmanager_frontend/src/components/CreateTaskForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction CreateTaskForm({setTasks}) {\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const response = await fetch('http://localhost:8080/tasks',{\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({title, description, completed: false}),\r\n        });\r\n        if (response.ok){\r\n            const newTask = await response.json();\r\n            setTasks((prevTasks) => [...prevTasks, newTask]);\r\n            setTitle('');\r\n            setDescription('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n            type=\"text\"\r\n            placeholder=\"Title\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            required\r\n            />\r\n            <textarea \r\n                placeholder=\"Description\"\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n            />\r\n            <button type=\"submit\">Add Task</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default CreateTaskForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,cAAcA,CAAC;EAACC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EAChC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMU,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAC;MACvDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB,CAAC;MAC7CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACb,KAAK;QAAEE,WAAW;QAAEY,SAAS,EAAE;MAAK,CAAC;IAC/D,CAAC,CAAC;IACF,IAAIP,QAAQ,CAACQ,EAAE,EAAC;MACZ,MAAMC,OAAO,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACrCnB,QAAQ,CAAEoB,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEF,OAAO,CAAC,CAAC;MAChDf,QAAQ,CAAC,EAAE,CAAC;MACZE,cAAc,CAAC,EAAE,CAAC;IACtB;EACJ,CAAC;EAED,oBACIP,OAAA;IAAMuB,QAAQ,EAAEf,YAAa;IAAAgB,QAAA,gBACzBxB,OAAA;MACAyB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,OAAO;MACnBC,KAAK,EAAEvB,KAAM;MACbwB,QAAQ,EAAGnB,CAAC,IAAKJ,QAAQ,CAACI,CAAC,CAACoB,MAAM,CAACF,KAAK,CAAE;MAC1CG,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,eACFlC,OAAA;MACI0B,WAAW,EAAC,aAAa;MACzBC,KAAK,EAAErB,WAAY;MACnBsB,QAAQ,EAAGnB,CAAC,IAAKF,cAAc,CAACE,CAAC,CAACoB,MAAM,CAACF,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC,eACFlC,OAAA;MAAQyB,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAQ;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEf;AAAC/B,EAAA,CApCQF,cAAc;AAAAkC,EAAA,GAAdlC,cAAc;AAsCvB,eAAeA,cAAc;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}